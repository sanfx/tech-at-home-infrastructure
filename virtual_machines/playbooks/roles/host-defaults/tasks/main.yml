---
- name: Check if auto update is enabled
  tags: ["rclone", "never"]
  stat:
    path: /etc/apt/apt.conf.d/20auto-upgrades
  register: autoupdate

- name: Disable auto update
  tags: ["rclone", "never"]
  when: autoupdate.stat.exists
  become: true
  become_method: sudo
  file:
    path: /etc/apt/apt.conf.d/20auto-upgrades
    state: absent

# - name: Disable the systemd-resolve stub DNS resolver (replaced by unbound)..
#   lineinfile:
#     dest: /etc/systemd/resolved.conf
#     regexp: '^#DNSStubListener='
#     line: 'DNSStubListener=no'
#     state: present
#   notify:
#     - restart systemd-resolved

- name: Register the system release
  tags: ["rclone", "never"]
  raw: uname -r
  register: linux_revision
  changed_when: no
  check_mode: no
  ignore_errors: false

- name: Update nameserver in /etc/resolv.conf
  when: inventory_hostname in ['vm1', 'vm2', 'vm3']
  lineinfile:
    state: present
    path: /etc/resolv.conf
    line: 'nameserver 1.1.1.1'
    insertbefore: BOF

- name: Remove old packages from the cache
  tags: ["apt", "never"]
  apt:
    autoclean: yes

- name: Remove dependencies that are no longer needed
  tags: ["apt", "never"]
  apt:
    autoremove: yes
    purge: yes

- name: Install jsondiff Python library
  pip:
    name: jsondiff
  tags: ["pip", "never"]

- name: Install pyyaml Python library
  tags: ["pip", "never"]
  pip:
    name: pyyaml

- name: Install fuse if it is absent
  tags: ["rclone", "never"]
  apt:
    name: fuse
    state: present

- name: Install zip if it is absent
  tags: ["rclone", "never"]
  apt:
    name: zip
    state: present

- name: Check that the rclone executable exists
  stat:
    path: /usr/local/bin/rclone
  register: rclone_stat_result

- name: Unarchive a file that is already on the remote machine
  when: not rclone_stat_result.stat.exists
  tags: ["rclone", "never"]
  ansible.builtin.unarchive:
    src: "https://downloads.rclone.org/{{rclone_version}}/rclone-{{rclone_version}}-{{ansible_system|lower}}-amd64.zip"
    dest: /tmp/
    remote_src: yes

- name: Move rclone to /usr/local/bin
  when: not rclone_stat_result.stat.exists
  tags: ["rclone", "never"]
  command: mv /tmp/rclone-{{rclone_version}}-{{ansible_system | lower}}-amd64/rclone /usr/local/bin

- name: Verify mount location exists on {{ansible_hostname}}
  tags: ["rclone", "never"]
  file:
    path: "/mnt/{{mount_location}}"
    state: directory

- name: Verify mount location data exists on {{ansible_hostname}}
  tags: ["rclone", "never"]
  file:
    path: "/data"
    state: directory

- name: Verify rclone cache directory exists
  tags: ["rclone", "never"]
  file:
    path: "/var/rclone"
    state: directory

- name: Create rclone config file on {{ansible_hostname}}.
  tags: ["rclone", "never"]
  template:
    src: rclone_config.j2
    dest: /etc/rclone.conf

- name: Remove rclone-mount service file.
  tags: ["rclone", "never"]
  file:
    path: /etc/systemd/system/rclone-mount.service
    state: absent
  register: service_file

- name: Create rclone systemd rclone service file on {{ansible_hostname}}.
  tags: ["rclone", "never"]
  template:
    src: rclone-mount.j2
    dest: /etc/systemd/system/rclone-mount.service

- name: Remove rclone-mount-data service file.
  tags: ["rclone", "never"]
  file:
    path: /etc/systemd/system/rclone-mount-data.service
    state: abseForce systemd to reloadnt
  register: service_file

- name: Create rclone systemd rclone service file on {{ansible_hostname}}.
  tags: ["rclone", "never"]
  template:
    src: rclone-mount-data.j2
    dest: /etc/systemd/system/rclone-mount-data.service

- name: Remove nextcloud mount service file.
  tags: ["rclone", "never"]
  file:
    path: /etc/systemd/system/nextcloud-mount.service
    state: absent
  register: service_file

- name: Create rclone systemd nextcloud mount service file on {{ansible_hostname}}.
  tags: ["rclone", "never"]
  template:
    src: nextcloud-mount.j2
    dest: /etc/systemd/system/nextcloud-mount.service

# - name: Force systemd to reload if necassary
#   tags: ["rclone"]
#   ansible.builtin.systemd:
#     daemon_reload: yes
#   when: service_file.changed

- name: Enable rclone-mount.service systemd unit {{ansible_hostname}}
  tags: ["rclone", "never"]
  ansible.builtin.systemd:
    name: rclone-mount.service
    enabled: yes
    state: started

- name: Enable rclone-mount-data systemd service unit {{ansible_hostname}}
  tags: ["rclone", "never"]
  ansible.builtin.systemd:
    name: rclone-mount-data.service
    enabled: yes
    state: started

- name: Enable nextcloud-mount systemd service unit {{ansible_hostname}}
  tags: ["rclone", "never"]
  ansible.builtin.systemd:
    name: nextcloud-mount.service
    enabled: yes
    state: started

# - name: Wait for any possibly running unattended upgrade to finish
#   # when: autoupdate.stat.exists
#   when:  "linux_revision.stdout_lines[0] != '4.4.0-210-generic'"
#   become: true
#   become_method: sudo
#   raw: systemd-run --property="After=apt-daily.service apt-daily-upgrade.service" --wait /bin/true

# - name: Reboot host(s) after disabling auto update
#   shell: sleep 2 && /sbin/shutdown -r now "ansible reboot request"
#   async: 1
#   poll: 0
#   ignore_errors: true
#   become: true
#   become_method: sudo
#   when: autoupdate.stat.exists and inventory_hostname != "127.0.0.1" and inventory_hostname != "localhost"

# - name: Waiting for host(s) to reboot
#   local_action: "wait_for host={{inventory_hostname}} port=22 state=started delay=60"
#   become: false
#   ignore_errors: true
#   when: autoupdate.stat.exists and inventory_hostname != "127.0.0.1" and inventory_hostname != "localhost"


