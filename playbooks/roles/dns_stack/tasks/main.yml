---
- name: Verify stacks  and lighttpd directory exists.
  tags: ["pihole"]
  file:
    path: "/home/{{ansible_user}}/stacks/lighttpd"
    state: directory

- name: Verify dns directory exists
  tags: ["dns"]
  file:
    path: "/home/{{ansible_user}}/stacks/dns"
    state: directory

- name: Verify dnsmasq/config directory exists (on first swarm node)
  tags: ["dnsmasq"]
  file:
    path: "/home/{{ansible_user}}/stacks/dnsmasq/config/"
    state: directory

- name: Verify coredns directory exists
  tags: ["coredns"]
  file:
    path: "/home/{{ansible_user}}/stacks/coredns/"
    state: directory

- name: Copy coredns rules with owner and permissions
  tags: ["coredns"]
  ansible.builtin.copy:
    src: ./coredns
    dest: /home/{{ansible_user}}/stacks/
    mode: '0644'

- name: Verify pihole exporter directory exists (on first swarm node)
  tags: ["pihole"]
  file:
    path: "/home/{{ansible_user}}/stacks/pihole/exporter"
    state: directory

# - name: Install dnsmasq if it is absent
#   tags: ["dns"]
#   apt:
#     name: dnsmasq
#     state: present

# - name: Systemd dnsmasq service de-activation
#   tags: ["dns"]
#   systemd:
#     name: dnsmasq.service
#     enabled: no
#     state: stopped

# - name: Create records.txt file for DNS (on first swarm node)
#   template:
#     src: records.j2
#     dest: /home/{{ansible_user}}/stacks/dnsmasq/config/records.txt
#     mode: 0775

- name: Create docker-compose stack file for DNS and DOH(on first swarm node)
  tags: ["dns"]
  template:
    src: dns-stack.j2
    dest: /home/{{ansible_user}}/stacks/dns/dns-stack.yml
    mode: 0775

# - name: Systemd resolved service de-activation
#   tags: ["dns"]
#   systemd:
#     name: systemd-resolved.service
#     enabled: no
#     state: stopped

- name: Deploy DNS stack from a compose file (on first swarm node)
  when: inventory_hostname == groups['swarm_managers'][0]
  tags: ["dns"]
  docker_stack:
    state: present
    name: dns
    compose:
      - /home/{{ansible_user}}/stacks/dns/dns-stack.yml

- name: Create docker-compose file for Pihole(on first swarm node)
  tags: ["pihole"]
  template:
    src: pihole-stack.j2
    dest: /home/{{ansible_user}}/stacks/pihole/docker-compose.yml
    mode: 0775

- name: Create lighttpd config file for lighttpd used by Pihole
  tags: ["pihole", "config"]
  template:
    src: lighttpd-external.j2
    dest: /home/{{ansible_user}}/stacks/lighttpd/external.conf
    mode: 0775

-  name: Update nameserver in /etc/resolv.conf
   tags: ["pihole", "config"]
   lineinfile:
     path: /etc/resolv.conf
     state: present
     line: 'nameserver 127.0.0.53'
     insertbefore: BOF

- name: Create custom dns record list for Pihole
  tags: ["pihole", "config"]
  template:
    src: pihole-custom-list.j2
    dest: /home/{{ansible_user}}/stacks/pihole/custom.list
    mode: 0775

# - name: Check that the webproc executable exists
#   stat:
#     path: /usr/local/bin/webproc
#   register: webproc_stat_result

# - name: Check that the gzip executable exists
#   stat:
#     path: /usr/bin/gzip
#   register: gzip_stat_result

# - name: Install gunzip if it is absent
#   when: not gzip_stat_result.stat.exists
#   tags: ["dns"]
#   apt:
#     name: gzip
#     state: present

# - name: Download webproc_0.4.0_linux_amd64.gz
#   when: not webproc_stat_result.stat.exists
#   tags: ["dns"]
#   get_url:
#     url: https://github.com/jpillora/webproc/releases/download/v0.4.0/webproc_0.4.0_linux_amd64.gz
#     dest: /usr/local/bin/webproc.gz
#     mode: '0777'

# - name: uncompressing webproc file.
#   when: not webproc_stat_result.stat.exists
#   shell: gunzip /usr/local/bin/webproc.gz 
#   tags: ["dns"]

# - name: Webproc DNSMasq Systemd Service file creation
#   tags: ["dns"]
#   copy:
#     dest: /etc/systemd/system/webproc-dnsmasq.service
#     content: |
#       [Unit]
#       Description=Webproc DNSMasq Systemd Service
#       Requires=network.target
#       After=network.target
#       [Service]
#       Type=simple
#       LimitNOFILE=1024
#       RemainAfterExit=true
#       Restart=on-failure
#       WorkingDirectory=/home/{{ansible_user}}/stacks/dnsmasq/
#       ExecStart=webproc -p {{dnsmasq_web_port}} -u {{DNSMASQ_HTTP_USER}} --pass {{DNSMASQ_HTTP_PASS}}  -- dnsmasq -C config/dnsmasq.conf -q -H config/records.txt --no-daemon
#       RestartSec=5
#       KillMode=process
#       KillSignal=SIGINT
#       [Install]
#       WantedBy=multi-user.target

- name: Docker compose Service file creation for Pihole
  tags: ["pihole"]
  copy:
    dest: /etc/systemd/system/pihole-docker-compose.service
    content: |
      [Unit]
      Description=Docker Compose Service
      Requires=docker.service
      After=docker.service
      [Service]
      Type=oneshot
      RemainAfterExit=true
      WorkingDirectory=/home/{{ansible_user}}/stacks/pihole/
      ExecStart=/usr/local/bin/docker-compose up -d --remove-orphans
      ExecStop=/usr/local/bin/docker-compose down
      [Install]
      WantedBy=multi-user.target

- name: forcing systemd to re-execute itself (2.8 and above)
  tags: ["pihole"]
  ansible.builtin.systemd:
    daemon_reexec: yes

- name: Systemd service activation
  tags: ["pihole"]
  become: yes
  ansible.builtin.systemd:
    name: pihole-docker-compose.service
    enabled: yes
    state: started

# - name: DNSMasq Webproc Systemd service activation
#   tags: ["dns"]
#   systemd:
#     name: webproc-dnsmasq.service
#     enabled: yes
#     state: started